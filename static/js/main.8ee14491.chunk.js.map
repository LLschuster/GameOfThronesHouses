{"version":3,"sources":["utils/constants.js","utils/functions.js","components/houses/MainPage.js","components/houses/DetailPage.js","components/shared/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["allHousesUrl","noRenderAtt","FetchData","_x","_FetchData","apply","this","arguments","_callee","url","params","finalUrl","fetchData","dataJson","_args","regenerator_default","a","wrap","_context","prev","next","length","undefined","fetch","sent","json","abrupt","stop","CheckIfIsUrl","stringToCheck","includes","MainPage","_useState","useState","_useState2","Object","slicedToArray","houses","setHouses","_GetHousesData","asyncToGenerator","mark","t0","alert","useEffect","housesName","GetHousesData","then","data","map","house","push","name","react_default","createElement","className","houseName","index","key","react_router_dom","style","textDecoration","to","concat","ExtraInfo","React","lazy","__webpack_require__","e","bind","ActionButtons","DetailPage","props","houseInfo","setHouseInfo","_useState3","_useState4","extraInfo","setExtraInfo","_useState5","_useState6","actionButton","setActionButton","_GetHouseData","houseIndex","_handleExtraData","_callee2","_context2","match","actionButtons","_x2","GetHouseData","entries","_ref","_ref2","value","onclick","_x3","handleExtraData","Suspense","fallback","info","_ref3","_ref4","keyToCheck","valueTocheck","i","ShouldRender","actions","Navbar","App","shared_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ee14491.chunk.js","sourcesContent":["export const allHousesUrl = 'https://www.anapioficeandfire.com/api/houses/';\r\nexport const noRenderAtt = ['','url','swornMembers'];","import { noRenderAtt } from \"./constants\";\r\n\r\nexport  async function FetchData(url, params=null){\r\n    let finalUrl = params ? url+params : url;\r\n    let fetchData = await fetch(finalUrl);\r\n    let dataJson = await fetchData.json();\r\n    return dataJson;\r\n}\r\n\r\nexport function CheckIfIsUrl(stringToCheck)\r\n{\r\n    return stringToCheck.includes('http');\r\n}\r\n\r\nexport function ShouldRender(keyToCheck, valueTocheck)\r\n{\r\n    if (valueTocheck=='' || CheckIfIsUrl(valueTocheck))\r\n        return false;\r\n    for (let i=0; i<noRenderAtt.length; i++)\r\n    {\r\n        if (keyToCheck === noRenderAtt[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {allHousesUrl} from '../../utils/constants'\r\nimport {FetchData} from '../../utils/functions'\r\n\r\nconst MainPage = ()=> {\r\n    const [houses, setHouses] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        let housesName = [];\r\n        GetHousesData().then((data) => {\r\n             data.map((house) => {\r\n                housesName.push(house.name);\r\n            })\r\n            setHouses(housesName);\r\n        });\r\n    },[])\r\n\r\n    async function GetHousesData(){\r\n        try {\r\n        return FetchData(allHousesUrl);\r\n        } catch(err){\r\n            alert(err);\r\n        }\r\n    }\r\n    \r\n        return (\r\n            <div>\r\n                <h5 className='teal-text'>Houses of the 7 kingdoms</h5>\r\n                {houses && houses.map((houseName,index) => {\r\n                    return (\r\n                        <div className='row' key={index}>\r\n                            <div className='col s12 m6'>\r\n                            <Link style={{textDecoration:'none'}} to={`/GameOfThronesHouses/house/${index+1}`} >\r\n                                <div className='card white teal-text' >\r\n                                   <span className='card-title' >{houseName}</span>\r\n                               </div>\r\n                            </Link>\r\n                            </div>\r\n                        </div>\r\n                      \r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default  MainPage","import React, { useState, useEffect} from 'react'\r\nimport {allHousesUrl} from '../../utils/constants'\r\nimport {FetchData, CheckIfIsUrl, ShouldRender} from '../../utils/functions'\r\nconst ExtraInfo = React.lazy(()=> import('./ExtraInfo'));\r\nconst ActionButtons = React.lazy(()=> import('./ActionButtons'));\r\n\r\n const DetailPage = (props) =>{\r\n    \r\n    const [houseInfo, setHouseInfo] = useState([]);\r\n    const [extraInfo, setExtraInfo] = useState('');\r\n    const [actionButton, setActionButton] = useState([]);\r\n\r\n    \r\n    async function GetHouseData(url, houseIndex){\r\n        try {\r\n     return await FetchData(url, houseIndex)\r\n        } catch(err){\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    //\r\n   async function handleExtraData(url){\r\n       try {\r\n         await FetchData(url).then(data=>{\r\n            setExtraInfo(data.name)\r\n        });\r\n    } catch (err) {\r\n        alert(err);\r\n        }\r\n    }\r\n    //components did mount or update function\r\n    useEffect(()=>{\r\n        let houseIndex = props.match.params.house; \r\n        let actionButtons  = [];\r\n\r\n         GetHouseData(allHousesUrl,houseIndex).then(data=> {\r\n             Object.entries(data).map(([key, value])=>{\r\n                if (key!='url' && CheckIfIsUrl(value))\r\n                        actionButtons.push({key, onclick:()=>handleExtraData(value)});   \r\n             })\r\n            setHouseInfo(data);\r\n            setActionButton(actionButtons);\r\n        });\r\n        \r\n    },[])\r\n\r\n        return (\r\n            <React.Suspense fallback={<div>Loading</div>}>\r\n                <ExtraInfo  info={extraInfo}/>\r\n                <div className=\"row\">\r\n                  <div className=\"col s12 m6\">\r\n                     <div className=\"card details-card light darken-1\" >\r\n            {\r\n                houseInfo && Object.entries(houseInfo).map(([key, value]) => {\r\n                    if (key==='name')\r\n                        return (<span className='card-title'key={key}>Details of {value}</span>)\r\n                    if (ShouldRender(key,value))\r\n                        return <p className='infoItem' key={key}>{key}: {value}</p>;\r\n                })\r\n            }\r\n                        <ActionButtons actions={actionButton} />\r\n                    </div>\r\n                </div>\r\n              </div>\r\n              </React.Suspense>\r\n        )\r\n    }\r\n\r\n\r\nexport default DetailPage","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n    <nav>\r\n    <div className=\"nav-wrapper teal\">\r\n      <Link to='/GameOfThronesHouses' className=\"brand-logo \">GOT API</Link>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport MainPage from './components/houses/MainPage';\r\nimport DetailPage from './components/houses/DetailPage';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport Navbar from './components/shared/Navbar';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n    <Navbar/>\r\n      <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path='/GameOfThronesHouses/' component={MainPage}></Route>\r\n            <Route exact path='/GameOfThronesHouses/house/:house' component={DetailPage}></Route>\r\n          </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}